#!/bin/bash
set -e

# Clean up obsolete nmigen directory, if present
if [ -d third_party/python/nmigen ] ; then
    rm -rf third_party/python/nmigen
fi

# Bring in submodules
git submodule update --init

# only these submodules need a recursive update
git submodule update --init --recursive third_party/python/pythondata-software-picolibc
git submodule update --init --recursive third_party/python/pythondata_cpu_vexriscv

CFU_ROOT="$(dirname $(dirname $(realpath ${BASH_SOURCE[0]})))"

# Verify dependencies that can be installed with apt (if available)
missing=()

if ! which gcc >/dev/null; then
    missing+=(gcc)
fi
if ! which make >/dev/null; then
    missing+=(make)
fi
if ! which cmake >/dev/null; then
    missing+=(cmake)
fi
if ! which openocd >/dev/null; then
    missing+=(openocd)
fi
if ! which expect >/dev/null; then
    missing+=(expect)
fi
if ! which ccache >/dev/null; then
    missing+=(ccache)
fi
if ! which verilator >/dev/null; then
    missing+=(verilator libevent-dev libjson-c-dev)
fi
if ! which ninja >/dev/null; then
    missing+=(ninja-build)
fi
if ! (apt list -i | grep libusb-1.0-0-dev) ; then
    missing+=(libusb-1.0-0-dev libftdi1-dev)
fi

echo Missing:
echo $missing

in_ci=0
if [ $# -gt 0 ] ; then
  if [ $1 == "-ci" ] ; then
    in_ci=1
  fi
fi

if [ ${#missing[@]} -gt 0 ]; then
    echo "Missing packages: ${missing[@]}" >&2
    if which apt >/dev/null; then
        if [ $in_ci -gt 0 ]; then
            sudo apt update
            sudo apt install -y "${missing[@]}"
        else
            echo -n "Install [y]/n? " >&2
            answer=$(read)
            if [ "$answer" == "y" -o -z "$answer" ]; then
                sudo apt update
                sudo apt install "${missing[@]}"
            fi
        fi
    else
        exit 1
    fi
fi


RENODE_VERSION="$(cat ${CFU_ROOT}/conf/renode.version)"
RENODE_VERSION_SPLIT=${RENODE_VERSION//"+"/ }
RENODE_VERSION_SPLIT=${RENODE_VERSION_SPLIT//"git"/ }
IFS=' ' read -r RENODE_VERSION_NO x RENODE_VERSION_SHA <<<"$RENODE_VERSION_SPLIT"
RENODE_DIR=${CFU_ROOT}/third_party/renode
# Get Renode if not installed
if [ ! -e "${RENODE_DIR}/renode" ]; then
    wget --progress=dot:giga "https://dl.antmicro.com/projects/renode/builds/renode-${RENODE_VERSION}.linux-portable.tar.gz"
    mkdir ${RENODE_DIR}
    tar xf  renode-*.linux-portable.tar.gz -C ${RENODE_DIR} --strip-components=1
    rm renode-${RENODE_VERSION}.linux-portable.tar.gz
    echo "To use Renode from any location add it to system path:"
    echo "export PATH=${RENODE_DIR}:\$PATH\""
    echo ""
    echo "If you wish to run automated Robot tests using Renode, run:"
    echo "python3 -m pip install -r ${RENODE_DIR}/tests/requirements.txt"
    echo ""
elif ! ${RENODE_DIR}/renode --version | grep "${RENODE_VERSION_NO}.*${RENODE_VERSION_SHA}" >/dev/null; then
    echo "Warning: Your Renode version (in ${RENODE_DIR}) does not match the required one (${RENODE_VERSION})"
fi

# Get necessary files from Renode VerilatorPlugin to build CFU library for Renode tests
# It is a temporary workaround as long as the sources are not present in Renode portable
VIL_DIR=${RENODE_DIR}/verilator-integration-library
if [ ! -e "${VIL_DIR}" ]; then
    mkdir -p ${VIL_DIR}/src/buses
    wget -O ${VIL_DIR}/renode_imports.h https://raw.githubusercontent.com/renode/renode-infrastructure/master/src/Emulator/Cores/renode/include/renode_imports.h
    wget -O ${VIL_DIR}/renode_imports_generated.h https://raw.githubusercontent.com/renode/renode-infrastructure/master/src/Emulator/Cores/renode/include/renode_imports_generated.h
    wget -O ${VIL_DIR}/src/renode_cfu.cpp https://raw.githubusercontent.com/renode/renode/master/src/Plugins/VerilatorPlugin/VerilatorIntegrationLibrary/src/renode_cfu.cpp
    wget -O ${VIL_DIR}/src/renode_cfu.h https://raw.githubusercontent.com/renode/renode/master/src/Plugins/VerilatorPlugin/VerilatorIntegrationLibrary/src/renode_cfu.h
    wget -O ${VIL_DIR}/src/renode.h https://raw.githubusercontent.com/renode/renode/master/src/Plugins/VerilatorPlugin/VerilatorIntegrationLibrary/src/renode.h
    wget -O ${VIL_DIR}/src/buses/cfu.cpp https://raw.githubusercontent.com/renode/renode/master/src/Plugins/VerilatorPlugin/VerilatorIntegrationLibrary/src/buses/cfu.cpp
    wget -O ${VIL_DIR}/src/buses/cfu.h https://raw.githubusercontent.com/renode/renode/master/src/Plugins/VerilatorPlugin/VerilatorIntegrationLibrary/src/buses/cfu.h
    patch -p1 ${VIL_DIR}/src/renode.h ${CFU_ROOT}/common/renode-verilator-integration/renode_h.patch
fi

# To update TFLite Micro, remove the ${TFLM_DIR} directory and run this script.
TFLM_DIR=${CFU_ROOT}/third_party/tflite-micro
if [ ! -e "${TFLM_DIR}" ]; then
    ${CFU_ROOT}/scripts/sync_from_tflite_micro.sh
else
    echo ""
    echo "${TFLM_DIR} found, not updating TensorFlow Lite micro"
    echo ""
fi


# Yosys -- get local copy if there isn't a sufficiently recent system verion 
if ! which yosys >/dev/null || ! yosys -V | grep "Yosys 0.1" >/dev/null; then
    if [ ! -e "${CFU_ROOT}/third_party/usr/local/bin/yosys" ]; then
        echo "Getting Yosys."
        mkdir -p "${CFU_ROOT}/third_party/usr/local"
        wget -qO- "https://anaconda.org/LiteX-Hub/yosys/0.16_32_gc1646a00a/download/linux-64/yosys-0.16_32_gc1646a00a-20220409_131122_py37.tar.bz2" | tar -xjC "${CFU_ROOT}/third_party/usr/local"
        wget -qO- "https://anaconda.org/LiteX-Hub/yosys-symbiflow-plugins/1.0.0_7_870_g1256b0a/download/linux-64/yosys-symbiflow-plugins-1.0.0_7_870_g1256b0a-20220409_131122.tar.bz2" | tar -xjC "${CFU_ROOT}/third_party/usr/local"
    else
        echo "Yosys already installed locally."
    fi
else
    echo -n "Found satisfactory system Yosys: "
    yosys -V
fi


# Check GCC
if ! which riscv64-unknown-elf-gcc >/dev/null; then
    echo "Warning: RISCV GCC toolchain not found. Please install one, following the instructions at"
    echo "https://cfu-playground.readthedocs.io/en/latest/setup-guide.html#step-3-install-riscv-toolchain"

elif ! riscv64-unknown-elf-gcc --version | grep 'SiFive GCC 10.1.' >/dev/null; then
    echo "Unsupported version of riscv64-unknown-elf-gcc. SiFive GCC 10.1.0 is known to work." >&2
    echo "To install this version, follow the instructions at"
    echo "https://cfu-playground.readthedocs.io/en/latest/setup-guide.html#step-3-install-riscv-toolchain"
fi

# Verify other dependencies

if ! which vivado >/dev/null; then
    echo -e "\e[0;31mWARNING:\e[0;33m vivado not in path.\e[m"
fi

# Regenerate .env file for VSCode
(
    source "${CFU_ROOT}/environment"
    cat > "${CFU_ROOT}/.env" << EOF
# Generated file
# Used by vscode Python plugins to find library code
# Regenerate with scripts/setup
PYTHONPATH=${PYTHONPATH//${CFU_ROOT}\//}
EOF
)

echo "Setup complete"
